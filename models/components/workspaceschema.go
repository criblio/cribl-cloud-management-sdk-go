// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"github.com/criblio/cribl-cloud-management-sdk-go/internal/utils"
	"time"
)

// WorkspaceSchemaRegion - AWS region where the workspace is deployed
type WorkspaceSchemaRegion string

const (
	WorkspaceSchemaRegionUsWest2      WorkspaceSchemaRegion = "us-west-2"
	WorkspaceSchemaRegionUsEast1      WorkspaceSchemaRegion = "us-east-1"
	WorkspaceSchemaRegionEuCentral1   WorkspaceSchemaRegion = "eu-central-1"
	WorkspaceSchemaRegionEuWest2      WorkspaceSchemaRegion = "eu-west-2"
	WorkspaceSchemaRegionApSoutheast2 WorkspaceSchemaRegion = "ap-southeast-2"
	WorkspaceSchemaRegionCaCentral1   WorkspaceSchemaRegion = "ca-central-1"
	WorkspaceSchemaRegionUsEast2      WorkspaceSchemaRegion = "us-east-2"
)

func (e WorkspaceSchemaRegion) ToPointer() *WorkspaceSchemaRegion {
	return &e
}

// State - Current state of the workspace
type State string

const (
	StateWorkspaceRequested                 State = "Workspace-Requested"
	StateWorkspaceProvisioning              State = "Workspace-Provisioning"
	StateWorkspaceProvisioningFailed        State = "Workspace-Provisioning-Failed"
	StateWorkspaceProvisioned               State = "Workspace-Provisioned"
	StateWorkspaceActive                    State = "Workspace-Active"
	StateWorkspaceUpdated                   State = "Workspace-Updated"
	StateWorkspaceFailedUpdate              State = "Workspace-Failed-Update"
	StateWorkspaceCleanupRequested          State = "Workspace-Cleanup-Requested"
	StateWorkspaceCleanupStarted            State = "Workspace-Cleanup-Started"
	StateWorkspaceCleanupTerraformCompleted State = "Workspace-Cleanup-Terraform-Completed"
	StateWorkspaceCleanupTerraformFailed    State = "Workspace-Cleanup-Terraform-Failed"
	StateWorkspaceCleanupCompleted          State = "Workspace-Cleanup-Completed"
	StateWorkspaceCleanupFailed             State = "Workspace-Cleanup-Failed"
)

func (e State) ToPointer() *State {
	return &e
}

type WorkspaceSchema struct {
	// Unique identifier for the workspace
	WorkspaceID string `json:"workspaceId"`
	// AWS region where the workspace is deployed
	Region WorkspaceSchemaRegion `json:"region"`
	// Timestamp when the workspace was last updated
	LastUpdated time.Time `json:"lastUpdated"`
	// Fully Qualified Domain Name of the workspace leader
	LeaderFQDN string `json:"leaderFQDN"`
	// Current state of the workspace
	State State `json:"state"`
	// User-friendly alias for the workspace
	Alias *string `json:"alias,omitempty"`
	// Detailed description of the workspace
	Description *string `json:"description,omitempty"`
	// Tags associated with the workspace
	Tags []string `json:"tags,omitempty"`
}

func (w WorkspaceSchema) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(w, "", false)
}

func (w *WorkspaceSchema) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &w, "", false, []string{"workspaceId", "region", "lastUpdated", "leaderFQDN", "state"}); err != nil {
		return err
	}
	return nil
}

func (w *WorkspaceSchema) GetWorkspaceID() string {
	if w == nil {
		return ""
	}
	return w.WorkspaceID
}

func (w *WorkspaceSchema) GetRegion() WorkspaceSchemaRegion {
	if w == nil {
		return WorkspaceSchemaRegion("")
	}
	return w.Region
}

func (w *WorkspaceSchema) GetLastUpdated() time.Time {
	if w == nil {
		return time.Time{}
	}
	return w.LastUpdated
}

func (w *WorkspaceSchema) GetLeaderFQDN() string {
	if w == nil {
		return ""
	}
	return w.LeaderFQDN
}

func (w *WorkspaceSchema) GetState() State {
	if w == nil {
		return State("")
	}
	return w.State
}

func (w *WorkspaceSchema) GetAlias() *string {
	if w == nil {
		return nil
	}
	return w.Alias
}

func (w *WorkspaceSchema) GetDescription() *string {
	if w == nil {
		return nil
	}
	return w.Description
}

func (w *WorkspaceSchema) GetTags() []string {
	if w == nil {
		return nil
	}
	return w.Tags
}
